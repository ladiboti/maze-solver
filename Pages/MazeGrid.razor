@code {
    [Parameter]
    public int Rows { get; set; } = 15;
    
    [Parameter]
    public int Columns { get; set; } = 30;
    
    private string[,] Grid;
    private readonly Random Random = new();
    private HashSet<(int, int)> VisitedCells = new();

    protected override void OnInitialized()
    {
        GenerateMaze();
    }

    public void GenerateMaze()
    {
        // Teljes rács inicializálása fallal
        Grid = new string[Rows, Columns];
        VisitedCells.Clear();
        
        for (int i = 0; i < Rows; i++)
        {
            for (int j = 0; j < Columns; j++)
            {
                Grid[i, j] = "wall";
            }
        }

        // Kezdőpont kiválasztása
        int startX = Random.Next(0, Rows);
        int startY = Random.Next(0, Columns);
        
        // Útvonal generálása
        GeneratePath(startX, startY);

        StateHasChanged();
    }

    private void GeneratePath(int x, int y)
    {
        // Jelenlegi cella látogatottá jelölése
        VisitedCells.Add((x, y));
        Grid[x, y] = "path";

        // Véletlenszerű irányok
        var directions = new List<(int dx, int dy)> 
        { 
            (-2, 0), (2, 0), (0, -2), (0, 2) 
        }.OrderBy(_ => Random.Next()).ToList();

        foreach (var (dx, dy) in directions)
        {
            int newX = x + dx;
            int newY = y + dy;

            // Koordináták ellenőrzése
            if (newX >= 0 && newX < Rows && newY >= 0 && newY < Columns)
            {
                // Ha a cél cella még nem látogatott
                if (!VisitedCells.Contains((newX, newY)))
                {
                    // Köztes fal eltávolítása
                    Grid[(x + newX) / 2, (y + newY) / 2] = "path";
                    
                    // Rekurzív útvonal generálás
                    GeneratePath(newX, newY);
                }
            }
        }
    }
}

<div class="grid border-4 border-retro-primary" style="grid-template-rows: repeat(@Rows, 1fr); grid-template-columns: repeat(@Columns, 1fr);">
    @for (int i = 0; i < Rows; i++)
    {
        @for (int j = 0; j < Columns; j++)
        {
            <div class="w-8 h-8 @(Grid[i, j] == "path" ? "bg-retro-background" : "bg-retro-primary") border border-retro-primary"></div>
        }
    }
</div>